version: '3.7'
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_db:/var/lib/postgresql/data

  airflow:
    build: .
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      MLFLOW_TRACKING_URI: http://web:9000
    volumes:
      - ./dags:/opt/airflow/dags
      - .:/opt/airflow/mlops_project
    ports:
      - "8081:8080"
    command: >
      bash -c "airflow db init && \
                airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com && \
                airflow scheduler & airflow webserver"

  minio:
    restart: always
    image: minio/minio:latest
    container_name: mlflow_s3
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data

    mc:
      image: minio/mc:latest
      depends_on:
        - minio
      container_name: mc
      env_file:
        - .env
      entrypoint: >
        /bin/sh -c "
        /tmp/wait-for-it.sh minio:9000 &&
        /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
        /usr/bin/mc mb minio/mlflow;
        exit 0;
        "
      volumes:
          - ./wait-for-it.sh:/tmp/wait-for-it.sh

    db:
      restart: always
      image: mysql/mysql-server:latest
      container_name: mlflow_db
      ports:
        - "3306:3306"
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      volumes:
        - dbdata:/var/lib/mysql

  web:
    restart: always
    build: ./mlflow
    image: mlflow_server
    container_name: mlflow_server
    depends_on:
        - mc
        - db
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - ./service_config.yaml:/app/service_config.yaml
      - ./models:/app/models
      - ./src:/app/src

  pushgateway:
    image: prom/pushgateway
    ports:
      - "9091:9091"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - pushgateway

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_TELEGRAM_BOT_TOKEN=${GF_TELEGRAM_BOT_TOKEN}
      - GF_TELEGRAM_CHAT_ID=${GF_TELEGRAM_CHAT_ID}

volumes:
  postgres_db:
  dbdata:
  minio_data:
